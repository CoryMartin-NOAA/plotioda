name: Run all CI tests
on: [pull_request]

jobs:
  run_all_tests:
    runs-on: ubuntu-latest
    name: Full CI (style and tests)
    container: jcsda/docker-gnu-openmpi-dev
    steps:

    - name: Cache IODA Bundle Develop
      id: cache-ioda
      uses: actions/cache@v2
      with:
        path: $GITHUB_WORKSPACE/ioda/build
        key: ioda-develop-20211119-3-${{ runner.os }}-jcsda-docker

    - name: Build IODA Bundle Develop
      if: steps.cache-ioda.outputs.cache-hit != 'true'
      run: |
        cd $GITHUB_WORKSPACE
        mkdir -p ioda/src
        cd ioda/src
        wget https://raw.githubusercontent.com/CoryMartin-NOAA/JEDI-T2O/main/bundles/ioda/CMakeLists.txt 
        cd ..
        mkdir build
        cd build
        ecbuild ../src
        make -j2
        make install
      
    - name: Install EMCPy Dependencies
      run: |
        apt-get update
        apt-get -y install libproj-dev proj-data proj-bin
        apt-get -y install libgeos-dev musl-dev libc-dev
        ln -s /usr/lib/x86_64-linux-musl/libc.so /lib/libc.musl-x86_64.so.1
        pip install --upgrade pip
        pip install pytest
        pip install pdoc
        pip install Shapely

    - name: Install EMCPy Develop
      run: |
        cd $GITHUB_WORKSPACE
        git clone https://github.com/noaa-emc/emcpy.git
        cd $GITHUB_WORKSPACE/emcpy
        pip install .
        
    - name: Checkout
      uses: actions/checkout@v2
      with:
        path: plotioda
    
    - name: Install
      run: |
        cd $GITHUB_WORKSPACE/plotioda
        pip install .
    
    - name: Check Coding Norms
      run: |
        cd $GITHUB_WORKSPACE/plotioda
        pycodestyle -v --config ./.pycodestyle .
    
    - name: Run Unit Tests
      run: |
        cd $GITHUB_WORKSPACE/plotioda
        echo $PYTHONPATH
        export PYTHONPATH=$PYTHONPATH:$GITHUB_WORKSPACE/ioda/build/lib/python3.8/pyioda/
        echo $PYTHONPATH
        pytest -v src/tests
